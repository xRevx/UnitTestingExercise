#
#on:
#  pull_request:
#    branches:
#      - main
#
#
#jobs:
#  clear-readme:
#    runs-on: ubuntu-latest
#    steps:
#      - name: checkout repo
#        uses: actions/checkout@v3
#
#      - name: Clear Readme
#        run: echo "$(date +'%Y-%m-%d-%H-%M-%S')" > README.md
#      - name: config git
#        run: |
#           git config --global user.email "action@github.com"
#           git config --global user.name "GitHub Actions"
#
#      - name: Commit readme
#        run: |
#          git fetch
#          git checkout main
#          git commit -am "Cleared readme" --author="GitHub Action <action@github.com>"
#          git push
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  run-tests:
#    needs: clear-readme
#    runs-on : ${{matrix.os}}
#
#    strategy:
#      matrix:
#        os: [ubuntu-latest]
#        python-versions: ['3.11.4']
#    steps:
#      - name: checkout repo
#        uses: actions/checkout@v3
#
#      - name: Install python
#        uses: actions/setup-python@v3
#        with:
#          python-version: ${{matrix.python-version}}
#
#      - name: Install pytest
#        run: |
#          pip install -U pytest
#
#
#      # runs the test and puts the output in a temporary file that will not be tracked by git
#      - name: Run pytest
#        env:
#          temp_log: temp_log.txt
#        run : pytest
#
#
#      - name: config git
#        if: success() || failure()
#        run: |
#          git config --global user.email "action@github.com"
#          git config --global user.name "GitHub Actions"
#
#      - name: Update readme with results
#        if: success() || failure()
#        run: |
#          git fetch
#          git checkout main
#          echo "Test Status: ${{ job.status }} OS: ${{matrix.os}} and python version: ${{matrix.python-version}}" >> README.md
#          echo /n >> README.md
#          git commit -am "Update test status on README " --author="GitHub Action <action@github.com>"
#          git push
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
on:
  pull_request:

jobs:
  test:
    name: python test
    runs-on : ubuntu-latest
    env:
      log_Output: README.md
      temp_log: temp_log.txt
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install pytest
        run: pip install -U pytest


      # runs the test and puts the output in a temporary file that will not be tracked by git
      - name: Run pytest
        run : pytest -q > $temp_log

      # add failure badge if the test failed
      - name: add test fail badge
        if  : failure()
        run : echo -e "\n## __results from $(date +'%Y-%m-%d')__ ${{ github.event.pull_request.head.ref }} -> ${{ github.event.pull_request.base.ref }} ![Static Badge](https://img.shields.io/badge/test-fail-red)\n" >> $log_Output

      # add pass badge if the test didn't fail
      - name: add test pass badge
        if  : success()
        run : echo -e "\n## __results from $(date +'%Y-%m-%d')__ ${{ github.event.pull_request.head.ref }} -> ${{ github.event.pull_request.base.ref }} ![Static Badge](https://img.shields.io/badge/test-pass-green)\n" >> $log_Output

      - name: config git
        if  : success() || failure()
        run : |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Actions"

      #the output log will be appended to the README.md in master so a checkout first is needed
      - name: checkout master
        if  : success() || failure()
        run : |
          git fetch
          git checkout main


      - name: append log to README
        if  : success() || failure()
        run : cat $temp_log >> $log_Output

      - name: commit logs
        if  : success() || failure()
        run : |
          git add $log_Output
          git commit -m "update $log_Output with results"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}